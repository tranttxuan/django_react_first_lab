"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var os = __importStar(require("os"));
var defaultOptions = {
    onBuildStart: [],
    onBuildEnd: [],
    onBuildExit: [],
    onCompile: [],
    dev: true,
    safe: false
};
var WebpackHookPlugin = /** @class */ (function () {
    function WebpackHookPlugin(options) {
        this.options = this.mergeOptions(options, defaultOptions);
    }
    WebpackHookPlugin.prototype.puts = function (error) {
        if (error) {
            throw error;
        }
    };
    WebpackHookPlugin.prototype.spreadStdoutAndStdErr = function (proc) {
        if (proc.stderr) {
            proc.stderr.pipe(process.stdout);
        }
        if (proc.stdout) {
            proc.stdout.pipe(process.stdout);
        }
    };
    WebpackHookPlugin.prototype.serializeScript = function (script) {
        var _a = script.split(' '), command = _a[0], args = _a.slice(1);
        return { command: command, args: args };
    };
    WebpackHookPlugin.prototype.handleScript = function (script) {
        if (os.platform() === 'win32' || this.options.safe) {
            this.spreadStdoutAndStdErr(child_process_1.exec(script, this.puts));
        }
        else {
            var _a = this.serializeScript(script), command = _a.command, args = _a.args;
            var proc = child_process_1.spawn(command, args, { stdio: 'inherit' });
            proc.on('close', this.puts);
        }
    };
    WebpackHookPlugin.prototype.mergeOptions = function (options, defaults) {
        for (var key in defaults) {
            if (options.hasOwnProperty(key)) {
                defaults[key] = options[key];
            }
        }
        return defaults;
    };
    WebpackHookPlugin.prototype.apply = function (compiler) {
        var _this = this;
        compiler.hooks.compilation.tap('WebpackHookPlugin', function (compilation) {
            if (_this.options.onBuildStart && _this.options.onBuildStart.length) {
                console.log('Executing pre-build scripts');
                for (var ii = 0; ii < _this.options.onBuildStart.length; ii += 1) {
                    _this.handleScript(_this.options.onBuildStart[ii]);
                }
                if (_this.options.dev) {
                    _this.options.onBuildStart = [];
                }
            }
        });
        compiler.hooks.watchRun.tap('WebpackHookPlugin', function () {
            if (_this.options.onCompile && _this.options.onCompile.length) {
                console.log('Executing compile scripts');
                for (var ii = 0; ii < _this.options.onCompile.length; ii += 1) {
                    _this.handleScript(_this.options.onCompile[ii]);
                }
            }
        });
        compiler.hooks.afterEmit.tapAsync('WebpackHookPlugin', function (compilation, callback) {
            if (_this.options.onBuildEnd && _this.options.onBuildEnd.length) {
                console.log('Executing post-build scripts');
                for (var ii = 0; ii < _this.options.onBuildEnd.length; ii += 1) {
                    _this.handleScript(_this.options.onBuildEnd[ii]);
                }
                if (_this.options.dev) {
                    _this.options.onBuildEnd = [];
                }
            }
            callback();
        });
        compiler.hooks.done.tap('WebpackHookPlugin', function () {
            if (_this.options.onBuildExit && _this.options.onBuildExit.length) {
                console.log('Executing additional scripts before exit');
                for (var ii = 0; ii < _this.options.onBuildExit.length; ii += 1) {
                    _this.handleScript(_this.options.onBuildExit[ii]);
                }
            }
        });
    };
    return WebpackHookPlugin;
}());
// to generate type definitions
exports.default = WebpackHookPlugin;
// to support CommonJS
module.exports = WebpackHookPlugin;
// to support ES6 default import
module.exports.default = module.exports;
//# sourceMappingURL=webpack-hook-plugin.js.map